#!/usr/bin/perl
use lib ".";
use JSON qw( to_json );
use Encode qw( encode decode FB_CROAK LEAVE_SRC );
use Dancer2;
use Lingua::GA::Gramadoir;
use Data::Dumper;

binmode STDIN, ":utf8";
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

my $gr = new Lingua::GA::Gramadoir(
	fix_spelling => 1,
	use_ignore_file => 0,
	unigram_tagging => 1,
	interface_language => "en",
	input_encoding => 'utf-8',
);

set serializer => 'JSON';
my $DEFAULT_PORT = 8081;
set port => $ENV{'port'} || $DEFAULT_PORT;


# perl unicode strings to perl unicode strings
# surveyed most common codepoints above 00FF in Tuairisc for this
# below includes everything appearing >= 100 times as of Apr 2018
# (and these are all in thousands!)
sub to_latin1_range {
	(my $txt) = @_;
	for ($txt) {
		s/–/-/g; # U+2013
		s/—/-/g; # U+2014
		s/‘/'/g; # U+2018
		s/’/'/g; # U+2019
		s/“/"/g; # U+201C
		s/”/"/g; # U+201D
		s/…/./g; # U+2026  (want to preserve length for offsets :/)
		s/€/E/g; # U+20AC
		s/\x{0D}\x{0A}/\n/g;  # CGI adds these?
	}
	return $txt;
}

# get '/shutdown'  => sub {
#   	Stop the Dancer2 server
#        	dancer_app->stop;
#    
#      	# Force `Devel::NYTProf` to finish profiling
#        	DB::finish_profile();
#    
#        	# Return a response indicating successful shutdown
#       	return 'Server shutdown initiated';
# };

get '/gram/:sentence' => sub {
    my $sentence = route_parameters->get('sentence');
    my $errs = $gr->grammatical_errors(encode('UTF-8', to_latin1_range($sentence)));
    # my $errs = $gr->grammatical_errors($sentence);
    my @errs_json;
    foreach my $error (@$errs) {
        (my $fy, my $fx, my $toy, my $tox, my $ruleId, my $msg, my $context, my $contextoffset, my $errorlength) = $error =~ m/^<error fromy="([0-9]+)" fromx="([0-9]+)" toy="([0-9]+)" tox="([0-9]+)" ruleId="([^"]+)" msg="([^"]+)".* context="([^"]+)" contextoffset="([0-9]+)" errorlength="([0-9]+)"\/>$/;
        my $errortext = substr($context,$contextoffset,$errorlength);
        push @errs_json, {'fromy' => $fy,
                            'fromx' => $fx,
                            'toy' => $toy,
                            'tox' => $tox,
                            'ruleId' => $ruleId,
                            'msg' => $msg,
                            'context' => $context,
                            'contextoffset' => $contextoffset,
                            'errorlength' => $errorlength,
                            'errortext' => $errortext,
                        };
    }
    return \@errs_json;

};

sub check_type_and_structure {
    my ($variable) = @_;
    # Check if the variable is a reference
    if (defined ref $variable) {
       # Determine the reference type and act accordingly
      if (ref $variable eq 'ARRAY') {
        debug "The variable is an array reference.\n";
      } elsif (ref $variable eq 'HASH') {
        debug "The variable is a hash reference.\n";
      } elsif (ref $variable eq 'SCALAR') {
        debug "The variable is a scalar reference.\n";
      } elsif (ref $variable eq 'CODE') {
        debug "The variable is a code reference.\n";
      } elsif (ref $variable eq 'REF') {
        debug "The variable is a reference to another reference.\n";
      } else {
        debug "Unknown reference type.\n";
      }
    } else {
      debug "The variable is not a reference. It is of type: " . ref($variable) . "\n";
    }
}

post '/get_sentences_real' => sub {
    my $text = decode_json(request->body);
    my $sentences = Lingua::GA::Gramadoir::get_sentences_real($text);
    my $json = to_json($sentences);
    return $json;
};

post '/tidy_input' => sub {
    my $text = decode_json(request->body);
    my $sentences = Lingua::GA::Gramadoir::tidy_input($text);
    my $json = to_json($sentences);
    return $json;
};

get '/add_tags_real' => sub {
    my $text = params->{'text'};
    unless($text) {
	    status 400;
	    return "Missing 'text' parameter";
    }
    my $result = $gr->add_tags_real($text);
    return to_json($result);
};

get '/rialacha' => sub {
    my $text = params->{'xml'};
    debug $text;
    unless($text) {
	    status 400;
	    return "Missing 'xml' parameter";
    }
    Lingua::GA::Gramadoir::rialacha($text);
    return to_json($text);
};

get '/finalise' => sub {
	my $pristine = params->{'pristine'};
	my $plain = params->{'plain'};
	my $s = params->{'xml_after_rules_applied'};

	my $errors = [];  # array reference to return
  # endoflast is global offset in $pristine following the end of last error
	my $endoflast = 0;
	my $toy = 0;   # line number at position $endoflast; lines count from 1
	my $tox = -1;  # line position of end of last match (not like $+[0]!)
	if ($s =~ /<E/) {
		my $buffered = Lingua::GA::Gramadoir::strip_entities(" $plain ");
		while ($s =~ m!(.*?)(<E[^>]+>)(.*?)</E>!g) {
			my $prefix = $1;
			my $thiserror = $2; # modify and push onto ans
			my $errorregex = $3;
			# deal with rare nested errors - only happens
			# when one (usu. len==1) is inserted in int.
			# of existing error of len>=3 (no overlapping!)
			if ($errorregex =~ m/^(.*)(<E[^>]+>)(.*)$/) {
				$prefix .= $1;
				$thiserror = $2;
				$errorregex = $3;
			}
			$prefix = Lingua::GA::Gramadoir::regexify($prefix);
			$errorregex = Lingua::GA::Gramadoir::regexify($errorregex);
			$errorregex =~ s/\[\^[^]]+\]\*$//;
			my $fromy;
			my $fromx;
			my $matchregex = "$prefix($errorregex)";
			$matchregex =~ s/^/(?<=[^A-Z\x{c1}\x{c9}\x{cd}\x{d3}\x{da}a-z\x{e1}\x{e9}\x{ed}\x{f3}\x{fa}])/ unless $prefix;
			print "MRE=$matchregex\n";
			$pristine =~ m!$matchregex!gs;
			my $globs = $-[1];
			my $globe = $+[1];
			unless (defined($globs) and defined($globe)) {
				# segfaults from carp?
				print STDERR "regex error in computing global coordinates for $thiserror\nMRE=$matchregex\n";
				next;
			}
			my $str = substr($pristine, $endoflast, $globs - $endoflast);
			# toy is that of the previous err (tox too)
			$fromy = $toy + ($str =~ tr/\n/\n/);
			if ($fromy == $toy) {
				$fromx = $tox + 1 + ($globs - $endoflast);
			}
			else {
				$str =~ m/([^\n]+)$/s;
				$fromx = length ($1); 
			}
			$str = substr($pristine, $globs, $globe - $globs);
			$toy = $fromy + ($str =~ tr/\n/\n/); 
			if ($fromy == $toy) {
				$tox = $fromx + ($globe - $globs) - 1;
			}
			else {
				$str =~ m/([^\n]+)$/s;
				$tox = length ($1) - 1 ; 
			}
			$endoflast = $globe;
			$fromx--;
			my $toans = $tox - 1;  # keep tox for next err 
			# now setup context; search in buffered which has had
			# entities stripped. Means we can't just insert <match> in it.
			$buffered =~ m!$matchregex!g;
			my $offset = $-[1] - 1;
			my $errortext = $1;
			my $errlen = length($errortext);
			$thiserror =~ s!^<E (msg="(.+)")>$!<error fromy="$fromy" fromx="$fromx" toy="$toy" tox="$toans" ruleId="Lingua::GA::Gramadoir/$2" $1 context="$plain" contextoffset="$offset" errorlength="$errlen"/>!;
			$thiserror = decode("ISO-8859-1", $thiserror);
			$thiserror =~ s! msg="([^"]+)"!" msg=\"".$gr->localize_me($1)."\""!e;
			push @$errors, $thiserror;
		}
	}

    	my @errs_json;
    	foreach my $error (@$errors) {
    	    (my $fy, my $fx, my $toy, my $tox, my $ruleId, my $msg, my $context, my $contextoffset, my $errorlength) = $error =~ m/^<error fromy="([0-9]+)" fromx="([0-9]+)" toy="([0-9]+)" tox="([0-9]+)" ruleId="([^"]+)" msg="([^"]+)".* context="([^"]+)" contextoffset="([0-9]+)" errorlength="([0-9]+)"\/>$/;
    	    my $errortext = substr($context,$contextoffset,$errorlength);
    	    push @errs_json, {'fromy' => $fy,
    	                        'fromx' => $fx,
    	                        'toy' => $toy,
    	                        'tox' => $tox,
    	                        'ruleId' => $ruleId,
    	                        'msg' => $msg,
    	                        'context' => $context,
    	                        'contextoffset' => $contextoffset,
    	                        'errorlength' => $errorlength,
    	                        'errortext' => $errortext,
    	                    };
    	}
    	return \@errs_json;
};

start;
